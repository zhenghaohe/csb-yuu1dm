{"version":3,"sources":["src/index.js"],"names":["form","document","getElementById","table","querySelector","keyTypes","getElementsByName","MAX_INTEGER","Number","value","getRandomString","Math","random","toString","substring","getRandomSmallIntegerString","floor","getRandomNumericString","oninput","e","target","randomKeyByType","MemoryTest","memoryTest","measureFor","f","duration","iterations","now","performance","elapsed","toFixed","createObject","getRandomKey","width","depth","obj","i","createMap","map","Map","set","deleteObject","key","deleteMap","delete","iterateObject","iterateMap","addEventListener","preventDefault","SelectedKeyType","Array","from","filter","keyType","checked","objectIters","mapInsertPerSec","objToIterate","objectIterPerSec","mapToIterate","mapIterPerSEc","objToDelete","timeToDeleteObj","mapToDelete","timeToDeletemap","innerHTML","myObj","myMap"],"mappings":"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","file":"src.86256769.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\n\nconst form = document.getElementById(\"form\");\nconst table = document.querySelector(\"table\");\nconst keyTypes = document.getElementsByName(\"key-type\");\nlet MAX_INTEGER = Number(document.getElementById(\"integer-key-max\").value);\ndocument.getElementById(\"integer-key-max\").oninput = (e) => {\n  MAX_INTEGER = Number(e.target.value);\n};\n\nfunction getRandomString() {\n  // stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n  return (\n    Math.random().toString(36).substring(2, 15) +\n    Math.random().toString(36).substring(2, 15)\n  );\n}\n\nfunction getRandomSmallIntegerString() {\n  return Math.floor(Math.random() * MAX_INTEGER).toString();\n}\n\nfunction getRandomNumericString() {\n  return Math.random().toString();\n}\n\nconst randomKeyByType = {\n  \"string-key\": getRandomString,\n  \"numeric-key\": getRandomNumericString,\n  \"integer-key\": getRandomSmallIntegerString\n};\n\nclass MemoryTest {}\n\nconst memoryTest = new MemoryTest();\n\nform.addEventListener(\"submit\", (e) => {\n  e.preventDefault();\n  const [SelectedKeyType] = Array.from(keyTypes).filter(\n    (keyType) => keyType.checked\n  );\n\n  const getRandomKey = randomKeyByType[SelectedKeyType.value];\n\n  const duration = Number(document.getElementById(\"duration\").value);\n  const width = Number(document.getElementById(\"width\").value);\n  const depth = Number(document.getElementById(\"depth\").value);\n\n  // measure insertion perf\n  // warm up for object insertion\n  measureFor(() => createObject(getRandomKey, width, depth), 100);\n  const objectIters = measureFor(\n    () => createObject(getRandomKey, width, depth),\n    duration\n  );\n\n  // warm up for map insertion\n  measureFor(() => createMap(getRandomKey, width, depth), 100);\n  const mapInsertPerSec = measureFor(\n    () => createMap(getRandomKey, width, depth),\n    duration\n  );\n  // measure iteration perf\n  const objToIterate = createObject(getRandomKey, width, depth);\n  const objectIterPerSec = measureFor(\n    () => iterateObject(objToIterate),\n    duration\n  );\n\n  const mapToIterate = createMap(getRandomKey, width, depth);\n  const mapIterPerSEc = measureFor(() => iterateMap(mapToIterate), duration);\n\n  // measure deletion perf\n  const objToDelete = createObject(getRandomKey, width, depth);\n  let now = performance.now();\n  deleteObject(objToDelete);\n  const timeToDeleteObj = (performance.now() - now).toFixed(4);\n\n  const mapToDelete = createMap(getRandomKey, width, depth);\n  now = performance.now();\n  deleteMap(mapToDelete);\n  const timeToDeletemap = (performance.now() - now).toFixed(4);\n\n  table.innerHTML = `\n      <tbody><tr>\n      <th>&nbsp;</th>\n      <th>insert (n/s)</th>\n      <th>iterate (n/s)</th>\n      <th>delete (ms)</th>\n    </tr>\n    <tr>\n      <td>Object</td>\n      <td>${objectIters}</td>\n      <td>${objectIterPerSec}</td>\n      <td>${timeToDeleteObj}</td>\n    </tr>\n    <tr>\n      <td>Map</td>\n      <td>${mapInsertPerSec}</td>\n      <td>${mapIterPerSEc}</td>\n      <td>${timeToDeletemap}</td>\n    </tr>\n    </tbody> \n  `;\n\n  // memory usage\n  memoryTest.myObj = objToIterate;\n  memoryTest.myMap = mapToIterate;\n});\n\nfunction measureFor(f, duration) {\n  let iterations = 0;\n  const now = performance.now();\n  let elapsed = 0;\n  while (elapsed < duration) {\n    f();\n    elapsed = performance.now() - now;\n    iterations++;\n  }\n\n  return ((iterations / elapsed) * 1000).toFixed(4);\n}\n\nfunction createObject(getRandomKey, width, depth) {\n  const obj = {};\n  for (let i = 0; i < width; i++) {\n    if (depth === 1) {\n      obj[getRandomKey()] = i;\n    } else {\n      obj[getRandomKey()] = createObject(getRandomKey, width, depth - 1);\n    }\n  }\n\n  return obj;\n}\n\nfunction createMap(getRandomKey, width, depth) {\n  const map = new Map();\n  for (let i = 0; i < width; i++) {\n    if (depth === 1) {\n      map.set(getRandomKey(), i);\n    } else {\n      map.set(getRandomKey(), createMap(getRandomKey, width, depth - 1));\n    }\n  }\n  return map;\n}\n\nfunction deleteObject(obj) {\n  for (const key in obj) {\n    const value = obj[key];\n    if (typeof value === \"object\") {\n      deleteObject(obj[key]);\n    }\n    delete obj[key];\n  }\n}\n\nfunction deleteMap(map) {\n  for (const [key, value] of map) {\n    if (typeof value === \"object\") {\n      deleteMap(value);\n    }\n    map.delete(key);\n  }\n}\n\nfunction iterateObject(obj) {\n  for (const key in obj) {\n    const value = obj[key];\n    if (typeof value === \"object\" && value !== null) {\n      iterateObject(value);\n    }\n  }\n}\n\nfunction iterateMap(map) {\n  for (const [key, value] of map) {\n    if (typeof value === \"object\" && value !== null) {\n      iterateMap(value);\n    }\n  }\n}\n"]}